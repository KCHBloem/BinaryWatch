
BinaryWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b8c  08000b94  00010b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b8c  08000b8c  00010b94  2**0
                  CONTENTS
  4 .ARM          00000000  08000b8c  08000b8c  00010b94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b8c  08000b94  00010b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b8c  08000b8c  00010b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b90  08000b90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000b94  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20000028  08000b94  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010b94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000adf  00000000  00000000  00010bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c1  00000000  00000000  0001169b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009a5f  00000000  00000000  00011ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b63  00000000  00000000  0001b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00032e7c  00000000  00000000  0001c07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004eef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  0004ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08000b74 	.word	0x08000b74

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000004 	.word	0x20000004
 80000fc:	08000b74 	.word	0x08000b74

08000100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000100:	b580      	push	{r7, lr}
 8000102:	b082      	sub	sp, #8
 8000104:	af00      	add	r7, sp, #0
 8000106:	0002      	movs	r2, r0
 8000108:	1dfb      	adds	r3, r7, #7
 800010a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	781b      	ldrb	r3, [r3, #0]
 8000110:	2b7f      	cmp	r3, #127	; 0x7f
 8000112:	d809      	bhi.n	8000128 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	001a      	movs	r2, r3
 800011a:	231f      	movs	r3, #31
 800011c:	401a      	ands	r2, r3
 800011e:	4b04      	ldr	r3, [pc, #16]	; (8000130 <__NVIC_EnableIRQ+0x30>)
 8000120:	2101      	movs	r1, #1
 8000122:	4091      	lsls	r1, r2
 8000124:	000a      	movs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]
  }
}
 8000128:	46c0      	nop			; (mov r8, r8)
 800012a:	46bd      	mov	sp, r7
 800012c:	b002      	add	sp, #8
 800012e:	bd80      	pop	{r7, pc}
 8000130:	e000e100 	.word	0xe000e100

08000134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000134:	b590      	push	{r4, r7, lr}
 8000136:	b083      	sub	sp, #12
 8000138:	af00      	add	r7, sp, #0
 800013a:	0002      	movs	r2, r0
 800013c:	6039      	str	r1, [r7, #0]
 800013e:	1dfb      	adds	r3, r7, #7
 8000140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	781b      	ldrb	r3, [r3, #0]
 8000146:	2b7f      	cmp	r3, #127	; 0x7f
 8000148:	d828      	bhi.n	800019c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014a:	4a2f      	ldr	r2, [pc, #188]	; (8000208 <__NVIC_SetPriority+0xd4>)
 800014c:	1dfb      	adds	r3, r7, #7
 800014e:	781b      	ldrb	r3, [r3, #0]
 8000150:	b25b      	sxtb	r3, r3
 8000152:	089b      	lsrs	r3, r3, #2
 8000154:	33c0      	adds	r3, #192	; 0xc0
 8000156:	009b      	lsls	r3, r3, #2
 8000158:	589b      	ldr	r3, [r3, r2]
 800015a:	1dfa      	adds	r2, r7, #7
 800015c:	7812      	ldrb	r2, [r2, #0]
 800015e:	0011      	movs	r1, r2
 8000160:	2203      	movs	r2, #3
 8000162:	400a      	ands	r2, r1
 8000164:	00d2      	lsls	r2, r2, #3
 8000166:	21ff      	movs	r1, #255	; 0xff
 8000168:	4091      	lsls	r1, r2
 800016a:	000a      	movs	r2, r1
 800016c:	43d2      	mvns	r2, r2
 800016e:	401a      	ands	r2, r3
 8000170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	019b      	lsls	r3, r3, #6
 8000176:	22ff      	movs	r2, #255	; 0xff
 8000178:	401a      	ands	r2, r3
 800017a:	1dfb      	adds	r3, r7, #7
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	0018      	movs	r0, r3
 8000180:	2303      	movs	r3, #3
 8000182:	4003      	ands	r3, r0
 8000184:	00db      	lsls	r3, r3, #3
 8000186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000188:	481f      	ldr	r0, [pc, #124]	; (8000208 <__NVIC_SetPriority+0xd4>)
 800018a:	1dfb      	adds	r3, r7, #7
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	b25b      	sxtb	r3, r3
 8000190:	089b      	lsrs	r3, r3, #2
 8000192:	430a      	orrs	r2, r1
 8000194:	33c0      	adds	r3, #192	; 0xc0
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019a:	e031      	b.n	8000200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800019c:	4a1b      	ldr	r2, [pc, #108]	; (800020c <__NVIC_SetPriority+0xd8>)
 800019e:	1dfb      	adds	r3, r7, #7
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	0019      	movs	r1, r3
 80001a4:	230f      	movs	r3, #15
 80001a6:	400b      	ands	r3, r1
 80001a8:	3b08      	subs	r3, #8
 80001aa:	089b      	lsrs	r3, r3, #2
 80001ac:	3306      	adds	r3, #6
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	18d3      	adds	r3, r2, r3
 80001b2:	3304      	adds	r3, #4
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	1dfa      	adds	r2, r7, #7
 80001b8:	7812      	ldrb	r2, [r2, #0]
 80001ba:	0011      	movs	r1, r2
 80001bc:	2203      	movs	r2, #3
 80001be:	400a      	ands	r2, r1
 80001c0:	00d2      	lsls	r2, r2, #3
 80001c2:	21ff      	movs	r1, #255	; 0xff
 80001c4:	4091      	lsls	r1, r2
 80001c6:	000a      	movs	r2, r1
 80001c8:	43d2      	mvns	r2, r2
 80001ca:	401a      	ands	r2, r3
 80001cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	019b      	lsls	r3, r3, #6
 80001d2:	22ff      	movs	r2, #255	; 0xff
 80001d4:	401a      	ands	r2, r3
 80001d6:	1dfb      	adds	r3, r7, #7
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	0018      	movs	r0, r3
 80001dc:	2303      	movs	r3, #3
 80001de:	4003      	ands	r3, r0
 80001e0:	00db      	lsls	r3, r3, #3
 80001e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e4:	4809      	ldr	r0, [pc, #36]	; (800020c <__NVIC_SetPriority+0xd8>)
 80001e6:	1dfb      	adds	r3, r7, #7
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	001c      	movs	r4, r3
 80001ec:	230f      	movs	r3, #15
 80001ee:	4023      	ands	r3, r4
 80001f0:	3b08      	subs	r3, #8
 80001f2:	089b      	lsrs	r3, r3, #2
 80001f4:	430a      	orrs	r2, r1
 80001f6:	3306      	adds	r3, #6
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	18c3      	adds	r3, r0, r3
 80001fc:	3304      	adds	r3, #4
 80001fe:	601a      	str	r2, [r3, #0]
}
 8000200:	46c0      	nop			; (mov r8, r8)
 8000202:	46bd      	mov	sp, r7
 8000204:	b003      	add	sp, #12
 8000206:	bd90      	pop	{r4, r7, pc}
 8000208:	e000e100 	.word	0xe000e100
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <updateTime>:
  uint8_t MNU;
  uint8_t ST;
  uint8_t SU;
} Time;

void updateTime(Time time) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	003b      	movs	r3, r7
 8000218:	6018      	str	r0, [r3, #0]
 800021a:	6059      	str	r1, [r3, #4]
  GPIO_State(GPIOB, 5, (time.HT & 0x01));
 800021c:	003b      	movs	r3, r7
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2201      	movs	r2, #1
 8000222:	4013      	ands	r3, r2
 8000224:	b2db      	uxtb	r3, r3
 8000226:	4844      	ldr	r0, [pc, #272]	; (8000338 <updateTime+0x128>)
 8000228:	001a      	movs	r2, r3
 800022a:	2105      	movs	r1, #5
 800022c:	f000 f9c6 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOB, 6, (time.HT & 0x02));
 8000230:	003b      	movs	r3, r7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2202      	movs	r2, #2
 8000236:	4013      	ands	r3, r2
 8000238:	b2db      	uxtb	r3, r3
 800023a:	483f      	ldr	r0, [pc, #252]	; (8000338 <updateTime+0x128>)
 800023c:	001a      	movs	r2, r3
 800023e:	2106      	movs	r1, #6
 8000240:	f000 f9bc 	bl	80005bc <GPIO_State>

  GPIO_State(GPIOB, 4, (time.HU & 0x01));
 8000244:	003b      	movs	r3, r7
 8000246:	785b      	ldrb	r3, [r3, #1]
 8000248:	2201      	movs	r2, #1
 800024a:	4013      	ands	r3, r2
 800024c:	b2db      	uxtb	r3, r3
 800024e:	483a      	ldr	r0, [pc, #232]	; (8000338 <updateTime+0x128>)
 8000250:	001a      	movs	r2, r3
 8000252:	2104      	movs	r1, #4
 8000254:	f000 f9b2 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 8, (time.HU & 0x02));
 8000258:	003b      	movs	r3, r7
 800025a:	785b      	ldrb	r3, [r3, #1]
 800025c:	2202      	movs	r2, #2
 800025e:	4013      	ands	r3, r2
 8000260:	b2da      	uxtb	r2, r3
 8000262:	23a0      	movs	r3, #160	; 0xa0
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2108      	movs	r1, #8
 8000268:	0018      	movs	r0, r3
 800026a:	f000 f9a7 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 0, (time.HU & 0x04));
 800026e:	003b      	movs	r3, r7
 8000270:	785b      	ldrb	r3, [r3, #1]
 8000272:	2204      	movs	r2, #4
 8000274:	4013      	ands	r3, r2
 8000276:	b2da      	uxtb	r2, r3
 8000278:	23a0      	movs	r3, #160	; 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	2100      	movs	r1, #0
 800027e:	0018      	movs	r0, r3
 8000280:	f000 f99c 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 1, (time.HU & 0x08));
 8000284:	003b      	movs	r3, r7
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	2208      	movs	r2, #8
 800028a:	4013      	ands	r3, r2
 800028c:	b2da      	uxtb	r2, r3
 800028e:	23a0      	movs	r3, #160	; 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2101      	movs	r1, #1
 8000294:	0018      	movs	r0, r3
 8000296:	f000 f991 	bl	80005bc <GPIO_State>

  GPIO_State(GPIOB, 3, (time.MNT & 0x01));
 800029a:	003b      	movs	r3, r7
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	2201      	movs	r2, #1
 80002a0:	4013      	ands	r3, r2
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4824      	ldr	r0, [pc, #144]	; (8000338 <updateTime+0x128>)
 80002a6:	001a      	movs	r2, r3
 80002a8:	2103      	movs	r1, #3
 80002aa:	f000 f987 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOB, 1, (time.MNT & 0x02));
 80002ae:	003b      	movs	r3, r7
 80002b0:	789b      	ldrb	r3, [r3, #2]
 80002b2:	2202      	movs	r2, #2
 80002b4:	4013      	ands	r3, r2
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	481f      	ldr	r0, [pc, #124]	; (8000338 <updateTime+0x128>)
 80002ba:	001a      	movs	r2, r3
 80002bc:	2101      	movs	r1, #1
 80002be:	f000 f97d 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOB, 0, (time.MNT & 0x04));
 80002c2:	003b      	movs	r3, r7
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2204      	movs	r2, #4
 80002c8:	4013      	ands	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	481a      	ldr	r0, [pc, #104]	; (8000338 <updateTime+0x128>)
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f000 f973 	bl	80005bc <GPIO_State>

  GPIO_State(GPIOA, 15, (time.MNU & 0x01));
 80002d6:	003b      	movs	r3, r7
 80002d8:	78db      	ldrb	r3, [r3, #3]
 80002da:	2201      	movs	r2, #1
 80002dc:	4013      	ands	r3, r2
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	23a0      	movs	r3, #160	; 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	210f      	movs	r1, #15
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 f968 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 11, (time.MNU & 0x02));
 80002ec:	003b      	movs	r3, r7
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	2202      	movs	r2, #2
 80002f2:	4013      	ands	r3, r2
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	23a0      	movs	r3, #160	; 0xa0
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	210b      	movs	r1, #11
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f95d 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 10, (time.MNU & 0x04));
 8000302:	003b      	movs	r3, r7
 8000304:	78db      	ldrb	r3, [r3, #3]
 8000306:	2204      	movs	r2, #4
 8000308:	4013      	ands	r3, r2
 800030a:	b2da      	uxtb	r2, r3
 800030c:	23a0      	movs	r3, #160	; 0xa0
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	210a      	movs	r1, #10
 8000312:	0018      	movs	r0, r3
 8000314:	f000 f952 	bl	80005bc <GPIO_State>
  GPIO_State(GPIOA, 9, (time.MNU & 0x08));
 8000318:	003b      	movs	r3, r7
 800031a:	78db      	ldrb	r3, [r3, #3]
 800031c:	2208      	movs	r2, #8
 800031e:	4013      	ands	r3, r2
 8000320:	b2da      	uxtb	r2, r3
 8000322:	23a0      	movs	r3, #160	; 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2109      	movs	r1, #9
 8000328:	0018      	movs	r0, r3
 800032a:	f000 f947 	bl	80005bc <GPIO_State>
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b002      	add	sp, #8
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	50000400 	.word	0x50000400

0800033c <main>:

uint8_t show = 0;
Time time;
int main(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

  SystemClockConfig();
 8000340:	f000 fb78 	bl	8000a34 <SystemClockConfig>
  GPIO_Init();
 8000344:	f000 f964 	bl	8000610 <GPIO_Init>
//LPUART_Init();
  RTC_Init();
 8000348:	f000 f994 	bl	8000674 <RTC_Init>
  initInterrupt();
 800034c:	f000 f8dc 	bl	8000508 <initInterrupt>
//printf("Binary Watch V1.0\r\n");
  time.HT = ((RTC->TR & 0x300000) >> 20);
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <main+0x84>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	0d1b      	lsrs	r3, r3, #20
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2203      	movs	r2, #3
 800035a:	4013      	ands	r3, r2
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <main+0x88>)
 8000360:	701a      	strb	r2, [r3, #0]
  time.HU = ((RTC->TR & 0xF0000) >> 16);
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <main+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	0c1b      	lsrs	r3, r3, #16
 8000368:	b2db      	uxtb	r3, r3
 800036a:	220f      	movs	r2, #15
 800036c:	4013      	ands	r3, r2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0x88>)
 8000372:	705a      	strb	r2, [r3, #1]
  time.MNT = ((RTC->TR & 0x7000) >> 12);
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0x84>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	0b1b      	lsrs	r3, r3, #12
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2207      	movs	r2, #7
 800037e:	4013      	ands	r3, r2
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0x88>)
 8000384:	709a      	strb	r2, [r3, #2]
  time.MNU = ((RTC->TR & 0xF00) >> 8);
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <main+0x84>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	0a1b      	lsrs	r3, r3, #8
 800038c:	b2db      	uxtb	r3, r3
 800038e:	220f      	movs	r2, #15
 8000390:	4013      	ands	r3, r2
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <main+0x88>)
 8000396:	70da      	strb	r2, [r3, #3]
  time.MNU = ((RTC->TR & 0xF00) >> 8);
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <main+0x84>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	220f      	movs	r2, #15
 80003a2:	4013      	ands	r3, r2
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <main+0x88>)
 80003a8:	70da      	strb	r2, [r3, #3]
  if (show) {
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <main+0x8c>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d004      	beq.n	80003bc <main+0x80>
    updateTime(time);
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <main+0x88>)
 80003b4:	6818      	ldr	r0, [r3, #0]
 80003b6:	6859      	ldr	r1, [r3, #4]
 80003b8:	f7ff ff2a 	bl	8000210 <updateTime>
  }

  while (1) {
    __WFI();
 80003bc:	bf30      	wfi
 80003be:	e7fd      	b.n	80003bc <main+0x80>
 80003c0:	40002800 	.word	0x40002800
 80003c4:	20000020 	.word	0x20000020
 80003c8:	2000001c 	.word	0x2000001c

080003cc <EXTI2_3_IRQHandler>:
  }
}

void EXTI2_3_IRQHandler() { /* Button Interrupt */
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  if (show == 1) {
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <EXTI2_3_IRQHandler+0x44>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10a      	bne.n	80003ee <EXTI2_3_IRQHandler+0x22>
    GPIOA_OFF;
 80003d8:	23a0      	movs	r3, #160	; 0xa0
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
    GPIOB_OFF;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <EXTI2_3_IRQHandler+0x48>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
    show = 0;
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <EXTI2_3_IRQHandler+0x44>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	e007      	b.n	80003fe <EXTI2_3_IRQHandler+0x32>
  } else {
    show = 1;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <EXTI2_3_IRQHandler+0x44>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
    updateTime(time);
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI2_3_IRQHandler+0x4c>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	6859      	ldr	r1, [r3, #4]
 80003fa:	f7ff ff09 	bl	8000210 <updateTime>
  }

  EXTI->PR |= EXTI_PR_PR2;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <EXTI2_3_IRQHandler+0x50>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <EXTI2_3_IRQHandler+0x50>)
 8000404:	2104      	movs	r1, #4
 8000406:	430a      	orrs	r2, r1
 8000408:	615a      	str	r2, [r3, #20]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000001c 	.word	0x2000001c
 8000414:	50000400 	.word	0x50000400
 8000418:	20000020 	.word	0x20000020
 800041c:	40010400 	.word	0x40010400

08000420 <RTC_IRQHandler>:

void RTC_IRQHandler() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  if (RTC->ISR & RTC_ISR_ALRAF) {
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <RTC_IRQHandler+0xa0>)
 8000426:	68da      	ldr	r2, [r3, #12]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	4013      	ands	r3, r2
 800042e:	d03b      	beq.n	80004a8 <RTC_IRQHandler+0x88>
    time.HT = ((RTC->TR & 0x300000) >> 20);
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <RTC_IRQHandler+0xa0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	0d1b      	lsrs	r3, r3, #20
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2203      	movs	r2, #3
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000440:	701a      	strb	r2, [r3, #0]
    time.HU = ((RTC->TR & 0xF0000) >> 16);
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <RTC_IRQHandler+0xa0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	b2db      	uxtb	r3, r3
 800044a:	220f      	movs	r2, #15
 800044c:	4013      	ands	r3, r2
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000452:	705a      	strb	r2, [r3, #1]
    time.MNT = ((RTC->TR & 0x7000) >> 12);
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <RTC_IRQHandler+0xa0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	0b1b      	lsrs	r3, r3, #12
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2207      	movs	r2, #7
 800045e:	4013      	ands	r3, r2
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000464:	709a      	strb	r2, [r3, #2]
    time.MNU = ((RTC->TR & 0xF00) >> 8);
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <RTC_IRQHandler+0xa0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	0a1b      	lsrs	r3, r3, #8
 800046c:	b2db      	uxtb	r3, r3
 800046e:	220f      	movs	r2, #15
 8000470:	4013      	ands	r3, r2
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000476:	70da      	strb	r2, [r3, #3]
    time.MNU = ((RTC->TR & 0xF00) >> 8);
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <RTC_IRQHandler+0xa0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b2db      	uxtb	r3, r3
 8000480:	220f      	movs	r2, #15
 8000482:	4013      	ands	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000488:	70da      	strb	r2, [r3, #3]
    if (show) {
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <RTC_IRQHandler+0xa8>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d004      	beq.n	800049c <RTC_IRQHandler+0x7c>
      updateTime(time);
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <RTC_IRQHandler+0xa4>)
 8000494:	6818      	ldr	r0, [r3, #0]
 8000496:	6859      	ldr	r1, [r3, #4]
 8000498:	f7ff feba 	bl	8000210 <updateTime>
    }
    RTC->ISR &= ~RTC_ISR_ALRAF; /* Clear interrupt flag for alarm A */
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <RTC_IRQHandler+0xa0>)
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <RTC_IRQHandler+0xa0>)
 80004a2:	490a      	ldr	r1, [pc, #40]	; (80004cc <RTC_IRQHandler+0xac>)
 80004a4:	400a      	ands	r2, r1
 80004a6:	60da      	str	r2, [r3, #12]
  }
  EXTI->PR |= EXTI_PR_PR17; /* Clear EXTI Interrupt for rtc alarm event */
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <RTC_IRQHandler+0xb0>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <RTC_IRQHandler+0xb0>)
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0289      	lsls	r1, r1, #10
 80004b2:	430a      	orrs	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
  enterStopMode();
 80004b6:	f000 f80d 	bl	80004d4 <enterStopMode>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40002800 	.word	0x40002800
 80004c4:	20000020 	.word	0x20000020
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	fffffeff 	.word	0xfffffeff
 80004d0:	40010400 	.word	0x40010400

080004d4 <enterStopMode>:

void enterStopMode(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  PWR->CR |= PWR_CR_ULP; /* Enter Ultra Low Power mode, Vref, programmable voltage detector, BOR and temperature sensor are disabled as well */
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <enterStopMode+0x30>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <enterStopMode+0x30>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0089      	lsls	r1, r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
  PWR->CR |= PWR_CR_LPSDSR; /* Voltage regulator switches to low-power mode when the CPU enters Deepsleep mode */
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <enterStopMode+0x30>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <enterStopMode+0x30>)
 80004ec:	2101      	movs	r1, #1
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]
  PWR->CR |= PWR_CR_PDDS;
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <enterStopMode+0x30>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b03      	ldr	r3, [pc, #12]	; (8000504 <enterStopMode+0x30>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40007000 	.word	0x40007000

08000508 <initInterrupt>:

void initInterrupt(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  SYSCFG->EXTICR[2] = 0x00;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <initInterrupt+0x7c>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  EXTI->IMR |= EXTI_IMR_IM2;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <initInterrupt+0x80>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <initInterrupt+0x80>)
 8000518:	2104      	movs	r1, #4
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= EXTI_RTSR_RT2;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <initInterrupt+0x80>)
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <initInterrupt+0x80>)
 8000524:	2104      	movs	r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	609a      	str	r2, [r3, #8]
  NVIC_EnableIRQ(EXTI2_3_IRQn);
 800052a:	2006      	movs	r0, #6
 800052c:	f7ff fde8 	bl	8000100 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2006      	movs	r0, #6
 8000534:	f7ff fdfe 	bl	8000134 <__NVIC_SetPriority>

  EXTI->IMR |= EXTI_IMR_IM17; /* Set flags for EXTI interrupt */
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <initInterrupt+0x80>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <initInterrupt+0x80>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0289      	lsls	r1, r1, #10
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= EXTI_RTSR_RT17; /* Set rising edge for exti interrupt */
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <initInterrupt+0x80>)
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <initInterrupt+0x80>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	609a      	str	r2, [r3, #8]

  NVIC_EnableIRQ(RTC_IRQn);
 8000554:	2002      	movs	r0, #2
 8000556:	f7ff fdd3 	bl	8000100 <__NVIC_EnableIRQ>
  NVIC_SetPriority(RTC_IRQn, 0);
 800055a:	2100      	movs	r1, #0
 800055c:	2002      	movs	r0, #2
 800055e:	f7ff fde9 	bl	8000134 <__NVIC_SetPriority>
  EXTI->PR |= EXTI_PR_PR2;
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <initInterrupt+0x80>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <initInterrupt+0x80>)
 8000568:	2104      	movs	r1, #4
 800056a:	430a      	orrs	r2, r1
 800056c:	615a      	str	r2, [r3, #20]
  EXTI->PR |= EXTI_PR_PR17;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <initInterrupt+0x80>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <initInterrupt+0x80>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0289      	lsls	r1, r1, #10
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]

}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40010000 	.word	0x40010000
 8000588:	40010400 	.word	0x40010400

0800058c <Delay>:

void Delay(uint32_t ms) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  ms *= 1000;
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	0013      	movs	r3, r2
 8000598:	015b      	lsls	r3, r3, #5
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  while (ms--) {
 80005a4:	e000      	b.n	80005a8 <Delay+0x1c>
    __NOP();
 80005a6:	46c0      	nop			; (mov r8, r8)
  while (ms--) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f9      	bne.n	80005a6 <Delay+0x1a>
  }
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}

080005bc <GPIO_State>:
  while (!(LPUART1->ISR & (0x01 << 6))) {
  }
  return ch;
}

void GPIO_State(GPIO_TypeDef *PORT, uint8_t pin, uint8_t state) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	0008      	movs	r0, r1
 80005c6:	0011      	movs	r1, r2
 80005c8:	1cfb      	adds	r3, r7, #3
 80005ca:	1c02      	adds	r2, r0, #0
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	1cbb      	adds	r3, r7, #2
 80005d0:	1c0a      	adds	r2, r1, #0
 80005d2:	701a      	strb	r2, [r3, #0]
  if (state) {
 80005d4:	1cbb      	adds	r3, r7, #2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <GPIO_State+0x36>
    PORT->ODR |= (0x01 << pin);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	1cfa      	adds	r2, r7, #3
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	2101      	movs	r1, #1
 80005e6:	4091      	lsls	r1, r2
 80005e8:	000a      	movs	r2, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	615a      	str	r2, [r3, #20]
  } else {
    PORT->ODR &= ~(0x01 << pin);
  }
}
 80005f0:	e00a      	b.n	8000608 <GPIO_State+0x4c>
    PORT->ODR &= ~(0x01 << pin);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	1cfa      	adds	r2, r7, #3
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	2101      	movs	r1, #1
 80005fc:	4091      	lsls	r1, r2
 80005fe:	000a      	movs	r2, r1
 8000600:	43d2      	mvns	r2, r2
 8000602:	401a      	ands	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	615a      	str	r2, [r3, #20]
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b002      	add	sp, #8
 800060e:	bd80      	pop	{r7, pc}

08000610 <GPIO_Init>:

void GPIO_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  RCC->IOPENR |= RCC_IOPENR_IOPAEN; /* Enable GPIO Clock for PORT A */
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <GPIO_Init+0x54>)
 8000616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <GPIO_Init+0x54>)
 800061a:	2101      	movs	r1, #1
 800061c:	430a      	orrs	r2, r1
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->IOPENR |= RCC_IOPENR_IOPBEN; /* Enable GPIO Clock for PORT B */
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <GPIO_Init+0x54>)
 8000622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <GPIO_Init+0x54>)
 8000626:	2102      	movs	r1, #2
 8000628:	430a      	orrs	r2, r1
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c

  GPIOA->MODER = (0x6B55FE85);
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <GPIO_Init+0x58>)
 8000632:	601a      	str	r2, [r3, #0]
   * A5: Reset State              |   A13: Alternate Function Mode (SWD)
   * A6: Reset State              |   A14: Alternate Function Mode (SWD)
   * A7: Reset State              |   A15: Output Mode
   */

  GPIOA->AFR[0] |= (0x06 << 12); /* AF6 on Pin A3 */
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	6a1a      	ldr	r2, [r3, #32]
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	21c0      	movs	r1, #192	; 0xc0
 8000640:	01c9      	lsls	r1, r1, #7
 8000642:	430a      	orrs	r2, r1
 8000644:	621a      	str	r2, [r3, #32]
  GPIOA->AFR[0] |= (0x06 << 16); /* AF6 on Pin A4 */
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	6a1a      	ldr	r2, [r3, #32]
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	21c0      	movs	r1, #192	; 0xc0
 8000652:	02c9      	lsls	r1, r1, #11
 8000654:	430a      	orrs	r2, r1
 8000656:	621a      	str	r2, [r3, #32]

  GPIOB->MODER = (0xFFFFD555);
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <GPIO_Init+0x5c>)
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <GPIO_Init+0x60>)
 800065c:	601a      	str	r2, [r3, #0]
   * B5: Output Mode
   * B6: Output Mode
   * B7: Reset State
   */

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	6b55fe85 	.word	0x6b55fe85
 800066c:	50000400 	.word	0x50000400
 8000670:	ffffd555 	.word	0xffffd555

08000674 <RTC_Init>:
  LPUART1->CR1 |= (0x01 << 3); /* Transmitter Enable */
  LPUART1->CR1 |= (0x01 << 0); /* LPUART Enable */
//LPUART1->CR1 |= USART_CR1_UESM;
}

void RTC_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  RCC->APB1ENR |= RCC_APB1ENR_PWREN; /* Power Interface Clock Enable */
 800067a:	4b93      	ldr	r3, [pc, #588]	; (80008c8 <RTC_Init+0x254>)
 800067c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800067e:	4b92      	ldr	r3, [pc, #584]	; (80008c8 <RTC_Init+0x254>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0549      	lsls	r1, r1, #21
 8000684:	430a      	orrs	r2, r1
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
  PWR->CR |= PWR_CR_DBP; /* Unlock Access to CSR */
 8000688:	4b90      	ldr	r3, [pc, #576]	; (80008cc <RTC_Init+0x258>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b8f      	ldr	r3, [pc, #572]	; (80008cc <RTC_Init+0x258>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0049      	lsls	r1, r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	601a      	str	r2, [r3, #0]
  RCC->CSR |= RCC_CSR_LSEDRV;
 8000696:	4b8c      	ldr	r3, [pc, #560]	; (80008c8 <RTC_Init+0x254>)
 8000698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800069a:	4b8b      	ldr	r3, [pc, #556]	; (80008c8 <RTC_Init+0x254>)
 800069c:	21c0      	movs	r1, #192	; 0xc0
 800069e:	0149      	lsls	r1, r1, #5
 80006a0:	430a      	orrs	r2, r1
 80006a2:	651a      	str	r2, [r3, #80]	; 0x50
  RCC->CSR |= RCC_CSR_LSEON; /* Enable Low Speed Internal Oscillator */
 80006a4:	4b88      	ldr	r3, [pc, #544]	; (80008c8 <RTC_Init+0x254>)
 80006a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006a8:	4b87      	ldr	r3, [pc, #540]	; (80008c8 <RTC_Init+0x254>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	0049      	lsls	r1, r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	651a      	str	r2, [r3, #80]	; 0x50
  while ((RCC->CSR & (RCC_CSR_LSERDY)) != (RCC_CSR_LSERDY)) /* Wait for LSI Oscillator to stabilize */
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	4b84      	ldr	r3, [pc, #528]	; (80008c8 <RTC_Init+0x254>)
 80006b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	401a      	ands	r2, r3
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d1f6      	bne.n	80006b4 <RTC_Init+0x40>
  {
  }
  RCC->CSR |= RCC_CSR_RTCEN; /* Enable RTC */
 80006c6:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <RTC_Init+0x254>)
 80006c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006ca:	4b7f      	ldr	r3, [pc, #508]	; (80008c8 <RTC_Init+0x254>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	02c9      	lsls	r1, r1, #11
 80006d0:	430a      	orrs	r2, r1
 80006d2:	651a      	str	r2, [r3, #80]	; 0x50
  RCC->CSR &= ~(0x03 << 16); /* Clear RTC Oscillator Selection */
 80006d4:	4b7c      	ldr	r3, [pc, #496]	; (80008c8 <RTC_Init+0x254>)
 80006d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d8:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <RTC_Init+0x254>)
 80006da:	497d      	ldr	r1, [pc, #500]	; (80008d0 <RTC_Init+0x25c>)
 80006dc:	400a      	ands	r2, r1
 80006de:	651a      	str	r2, [r3, #80]	; 0x50
  RCC->CSR |= RCC_CSR_RTCSEL_LSE; /* Select Low Speed Internal Oscillator as source for RTC */
 80006e0:	4b79      	ldr	r3, [pc, #484]	; (80008c8 <RTC_Init+0x254>)
 80006e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006e4:	4b78      	ldr	r3, [pc, #480]	; (80008c8 <RTC_Init+0x254>)
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	0249      	lsls	r1, r1, #9
 80006ea:	430a      	orrs	r2, r1
 80006ec:	651a      	str	r2, [r3, #80]	; 0x50
  RCC->APB1ENR &= ~ RCC_APB1ENR_PWREN; /* Power Interface Clock Disable */
 80006ee:	4b76      	ldr	r3, [pc, #472]	; (80008c8 <RTC_Init+0x254>)
 80006f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006f2:	4b75      	ldr	r3, [pc, #468]	; (80008c8 <RTC_Init+0x254>)
 80006f4:	4977      	ldr	r1, [pc, #476]	; (80008d4 <RTC_Init+0x260>)
 80006f6:	400a      	ands	r2, r1
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38

  uint8_t state = 0;
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
  uint8_t HT = 0, HU = 0, MNT = 0, MNU = 0;
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	1d7b      	adds	r3, r7, #5
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	1cfb      	adds	r3, r7, #3
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  if (RTC_INIT) {
    state = 5;
    RTC->BKP0R = 0x00173750;
  }
  while (state == 0) {
 8000718:	e033      	b.n	8000782 <RTC_Init+0x10e>
    if (HT < 2) {
 800071a:	1dbb      	adds	r3, r7, #6
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d805      	bhi.n	800072e <RTC_Init+0xba>
      HT++;
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	3201      	adds	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e002      	b.n	8000734 <RTC_Init+0xc0>
    } else {
      HT = 0;
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
    }

    GPIO_State(GPIOB, 5, (HT & 0x01));
 8000734:	1dbb      	adds	r3, r7, #6
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2201      	movs	r2, #1
 800073a:	4013      	ands	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4866      	ldr	r0, [pc, #408]	; (80008d8 <RTC_Init+0x264>)
 8000740:	001a      	movs	r2, r3
 8000742:	2105      	movs	r1, #5
 8000744:	f7ff ff3a 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOB, 6, (HT & 0x02));
 8000748:	1dbb      	adds	r3, r7, #6
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2202      	movs	r2, #2
 800074e:	4013      	ands	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4861      	ldr	r0, [pc, #388]	; (80008d8 <RTC_Init+0x264>)
 8000754:	001a      	movs	r2, r3
 8000756:	2106      	movs	r1, #6
 8000758:	f7ff ff30 	bl	80005bc <GPIO_State>
    Delay(1000);
 800075c:	23fa      	movs	r3, #250	; 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ff13 	bl	800058c <Delay>
    if (BUTTON_PRESSED) {
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	2204      	movs	r2, #4
 800076e:	4013      	ands	r3, r2
 8000770:	1dfa      	adds	r2, r7, #7
 8000772:	1df9      	adds	r1, r7, #7
 8000774:	7809      	ldrb	r1, [r1, #0]
 8000776:	7011      	strb	r1, [r2, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <RTC_Init+0x10e>
      state = 1;
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
  while (state == 0) {
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0c7      	beq.n	800071a <RTC_Init+0xa6>
    }
  }

  while (state == 1) {
 800078a:	e04a      	b.n	8000822 <RTC_Init+0x1ae>
    if (HU < 9) {
 800078c:	1d7b      	adds	r3, r7, #5
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b08      	cmp	r3, #8
 8000792:	d805      	bhi.n	80007a0 <RTC_Init+0x12c>
      HU++;
 8000794:	1d7b      	adds	r3, r7, #5
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	1d7b      	adds	r3, r7, #5
 800079a:	3201      	adds	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e002      	b.n	80007a6 <RTC_Init+0x132>
    } else {
      HU = 0;
 80007a0:	1d7b      	adds	r3, r7, #5
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
    }
    GPIO_State(GPIOB, 4, (HU & 0x01));
 80007a6:	1d7b      	adds	r3, r7, #5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4849      	ldr	r0, [pc, #292]	; (80008d8 <RTC_Init+0x264>)
 80007b2:	001a      	movs	r2, r3
 80007b4:	2104      	movs	r1, #4
 80007b6:	f7ff ff01 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 8, (HU & 0x02));
 80007ba:	1d7b      	adds	r3, r7, #5
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2202      	movs	r2, #2
 80007c0:	4013      	ands	r3, r2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2108      	movs	r1, #8
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff fef6 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 0, (HU & 0x04));
 80007d0:	1d7b      	adds	r3, r7, #5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2204      	movs	r2, #4
 80007d6:	4013      	ands	r3, r2
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2100      	movs	r1, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff feeb 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 1, (HU & 0x08));
 80007e6:	1d7b      	adds	r3, r7, #5
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2208      	movs	r2, #8
 80007ec:	4013      	ands	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2101      	movs	r1, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fee0 	bl	80005bc <GPIO_State>
    Delay(1000);
 80007fc:	23fa      	movs	r3, #250	; 0xfa
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fec3 	bl	800058c <Delay>
    if (BUTTON_PRESSED) {
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	2204      	movs	r2, #4
 800080e:	4013      	ands	r3, r2
 8000810:	1dfa      	adds	r2, r7, #7
 8000812:	1df9      	adds	r1, r7, #7
 8000814:	7809      	ldrb	r1, [r1, #0]
 8000816:	7011      	strb	r1, [r2, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <RTC_Init+0x1ae>
      state = 2;
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	2202      	movs	r2, #2
 8000820:	701a      	strb	r2, [r3, #0]
  while (state == 1) {
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d0b0      	beq.n	800078c <RTC_Init+0x118>
    }
  }

  while (state == 2) {
 800082a:	e03d      	b.n	80008a8 <RTC_Init+0x234>
    if (MNT < 6) {
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d805      	bhi.n	8000840 <RTC_Init+0x1cc>
      MNT++;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	3201      	adds	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e002      	b.n	8000846 <RTC_Init+0x1d2>
    } else {
      MNT = 0;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
    }

    GPIO_State(GPIOB, 3, (MNT & 0x01));
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4821      	ldr	r0, [pc, #132]	; (80008d8 <RTC_Init+0x264>)
 8000852:	001a      	movs	r2, r3
 8000854:	2103      	movs	r1, #3
 8000856:	f7ff feb1 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOB, 1, (MNT & 0x02));
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2202      	movs	r2, #2
 8000860:	4013      	ands	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <RTC_Init+0x264>)
 8000866:	001a      	movs	r2, r3
 8000868:	2101      	movs	r1, #1
 800086a:	f7ff fea7 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOB, 0, (MNT & 0x04));
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2204      	movs	r2, #4
 8000874:	4013      	ands	r3, r2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <RTC_Init+0x264>)
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f7ff fe9d 	bl	80005bc <GPIO_State>
    Delay(1000);
 8000882:	23fa      	movs	r3, #250	; 0xfa
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff fe80 	bl	800058c <Delay>
    if (BUTTON_PRESSED) {
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2204      	movs	r2, #4
 8000894:	4013      	ands	r3, r2
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	1df9      	adds	r1, r7, #7
 800089a:	7809      	ldrb	r1, [r1, #0]
 800089c:	7011      	strb	r1, [r2, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d102      	bne.n	80008a8 <RTC_Init+0x234>
      state = 3;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2203      	movs	r2, #3
 80008a6:	701a      	strb	r2, [r3, #0]
  while (state == 2) {
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d0bd      	beq.n	800082c <RTC_Init+0x1b8>
    }
  }

  while (state == 3) {
 80008b0:	e062      	b.n	8000978 <RTC_Init+0x304>
    if (MNU < 9) {
 80008b2:	1cfb      	adds	r3, r7, #3
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d810      	bhi.n	80008dc <RTC_Init+0x268>
      MNU++;
 80008ba:	1cfb      	adds	r3, r7, #3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	3201      	adds	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e00d      	b.n	80008e2 <RTC_Init+0x26e>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40007000 	.word	0x40007000
 80008d0:	fffcffff 	.word	0xfffcffff
 80008d4:	efffffff 	.word	0xefffffff
 80008d8:	50000400 	.word	0x50000400
    } else {
      MNU = 0;
 80008dc:	1cfb      	adds	r3, r7, #3
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    }

    GPIO_State(GPIOA, 15, (MNU & 0x01));
 80008e2:	1cfb      	adds	r3, r7, #3
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	210f      	movs	r1, #15
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fe62 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 11, (MNU & 0x02));
 80008f8:	1cfb      	adds	r3, r7, #3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2202      	movs	r2, #2
 80008fe:	4013      	ands	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	210b      	movs	r1, #11
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fe57 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 10, (MNU & 0x04));
 800090e:	1cfb      	adds	r3, r7, #3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2204      	movs	r2, #4
 8000914:	4013      	ands	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	210a      	movs	r1, #10
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fe4c 	bl	80005bc <GPIO_State>
    GPIO_State(GPIOA, 9, (MNU & 0x08));
 8000924:	1cfb      	adds	r3, r7, #3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2208      	movs	r2, #8
 800092a:	4013      	ands	r3, r2
 800092c:	b2da      	uxtb	r2, r3
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2109      	movs	r1, #9
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fe41 	bl	80005bc <GPIO_State>
    Delay(1000);
 800093a:	23fa      	movs	r3, #250	; 0xfa
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fe24 	bl	800058c <Delay>
    if (BUTTON_PRESSED) {
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2204      	movs	r2, #4
 800094c:	4013      	ands	r3, r2
 800094e:	d102      	bne.n	8000956 <RTC_Init+0x2e2>
      state = 0;
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
    }
    RTC->BKP0R = ((HT << 20) | (HU << 16) | (MNT << 12) | (MNU << 8)); /*  */
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	051a      	lsls	r2, r3, #20
 800095c:	1d7b      	adds	r3, r7, #5
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	431a      	orrs	r2, r3
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	031b      	lsls	r3, r3, #12
 800096a:	431a      	orrs	r2, r3
 800096c:	1cfb      	adds	r3, r7, #3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	431a      	orrs	r2, r3
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <RTC_Init+0x3ac>)
 8000976:	651a      	str	r2, [r3, #80]	; 0x50
  while (state == 3) {
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d098      	beq.n	80008b2 <RTC_Init+0x23e>

  }
  RTC->WPR = 0xCA; /* Unlock write protection on all RTC registers */
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <RTC_Init+0x3ac>)
 8000982:	22ca      	movs	r2, #202	; 0xca
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53; /* Unlock write protection on all RTC registers */
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <RTC_Init+0x3ac>)
 8000988:	2253      	movs	r2, #83	; 0x53
 800098a:	625a      	str	r2, [r3, #36]	; 0x24

  RTC->ISR = RTC_ISR_INIT; /* Allow Time to be edited, initialization mode enabled */
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <RTC_Init+0x3ac>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	60da      	str	r2, [r3, #12]
  while ((RTC->ISR & (RTC_ISR_INITF)) != (RTC_ISR_INITF)) {
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <RTC_Init+0x3ac>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	4013      	ands	r3, r2
 800099c:	2b40      	cmp	r3, #64	; 0x40
 800099e:	d1f9      	bne.n	8000994 <RTC_Init+0x320>
  }
  RTC->PRER = 0x007F00FF; /* Configure Prescaler: RTCCLK / (PREDIV_A + 1) = 32768kHz / 127 + 1 = 256Hz 256Hz / (PREDIV_S + 1) = 256 / 255 + 1 = 1Hz*/
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <RTC_Init+0x3ac>)
 80009a2:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <RTC_Init+0x3b0>)
 80009a4:	611a      	str	r2, [r3, #16]
  RTC->TR = RTC->BKP0R; /*  */
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <RTC_Init+0x3ac>)
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <RTC_Init+0x3ac>)
 80009aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80009ac:	601a      	str	r2, [r3, #0]
  RTC->CR |= RTC_CR_FMT; /* 24-hour time format */
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <RTC_Init+0x3ac>)
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <RTC_Init+0x3ac>)
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	430a      	orrs	r2, r1
 80009b8:	609a      	str	r2, [r3, #8]
  RTC->CR |= RTC_CR_BYPSHAD;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <RTC_Init+0x3ac>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <RTC_Init+0x3ac>)
 80009c0:	2120      	movs	r1, #32
 80009c2:	430a      	orrs	r2, r1
 80009c4:	609a      	str	r2, [r3, #8]

  RTC->CR &= ~ RTC_CR_ALRAE; /* Disable Alarm A */
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <RTC_Init+0x3ac>)
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <RTC_Init+0x3ac>)
 80009cc:	4916      	ldr	r1, [pc, #88]	; (8000a28 <RTC_Init+0x3b4>)
 80009ce:	400a      	ands	r2, r1
 80009d0:	609a      	str	r2, [r3, #8]
  while ((RTC->ISR & RTC_ISR_ALRAWF) != RTC_ISR_ALRAWF) { /* Wait for it to be allowed to modify Alarm A */
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <RTC_Init+0x3ac>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	2201      	movs	r2, #1
 80009da:	4013      	ands	r3, r2
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d1f9      	bne.n	80009d4 <RTC_Init+0x360>
  }
  RTC->ALRMAR = RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2; /* MSK4 means don't care about day and time, MSK3 means hours don't care, MSK2 means minutes don't care*/
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <RTC_Init+0x3ac>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <RTC_Init+0x3b8>)
 80009e4:	61da      	str	r2, [r3, #28]
  /* So we only care if the seconds and subseconds match meaning we only care if time is the following: xx:xx:00:00 aka once a minute */
  RTC->CR |= RTC_CR_ALRAIE | RTC_CR_ALRAE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <RTC_Init+0x3ac>)
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <RTC_Init+0x3ac>)
 80009ec:	2188      	movs	r1, #136	; 0x88
 80009ee:	0149      	lsls	r1, r1, #5
 80009f0:	430a      	orrs	r2, r1
 80009f2:	609a      	str	r2, [r3, #8]

  RTC->ISR &= ~RTC_ISR_INIT; /* Initialization mode disabled */
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <RTC_Init+0x3ac>)
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <RTC_Init+0x3ac>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	438a      	bics	r2, r1
 80009fe:	60da      	str	r2, [r3, #12]

  RTC->WPR = 0xFE; /* Lock write protection on all RTC registers */
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <RTC_Init+0x3ac>)
 8000a02:	22fe      	movs	r2, #254	; 0xfe
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x64; /* Lock write protection on all RTC registers */
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <RTC_Init+0x3ac>)
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24

  PWR->CR &= ~ PWR_CR_DBP; /* Lock Access to CSR */
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <RTC_Init+0x3bc>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <RTC_Init+0x3bc>)
 8000a12:	4905      	ldr	r1, [pc, #20]	; (8000a28 <RTC_Init+0x3b4>)
 8000a14:	400a      	ands	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40002800 	.word	0x40002800
 8000a24:	007f00ff 	.word	0x007f00ff
 8000a28:	fffffeff 	.word	0xfffffeff
 8000a2c:	80808000 	.word	0x80808000
 8000a30:	40007000 	.word	0x40007000

08000a34 <SystemClockConfig>:

void SystemClockConfig(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  RCC->CR |= RCC_CR_HSIDIVEN;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <SystemClockConfig+0x98>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <SystemClockConfig+0x98>)
 8000a3e:	2108      	movs	r1, #8
 8000a40:	430a      	orrs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
  RCC->CR |= RCC_CR_HSION; /* Enable High speed internal oscillator */
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <SystemClockConfig+0x98>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <SystemClockConfig+0x98>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSIRDY) == 0) { /* Wait for HSI to become stable */
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <SystemClockConfig+0x98>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2204      	movs	r2, #4
 8000a58:	4013      	ands	r3, r2
 8000a5a:	d0fa      	beq.n	8000a52 <SystemClockConfig+0x1e>
  }

  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <SystemClockConfig+0x98>)
 8000a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <SystemClockConfig+0x98>)
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	0549      	lsls	r1, r1, #21
 8000a66:	430a      	orrs	r2, r1
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
  PWR->CR |= PWR_CR_VOS;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <SystemClockConfig+0x9c>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <SystemClockConfig+0x9c>)
 8000a70:	21c0      	movs	r1, #192	; 0xc0
 8000a72:	0149      	lsls	r1, r1, #5
 8000a74:	430a      	orrs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]

  RCC->CFGR &= ~RCC_CFGR_SW; /* Reset System Clock Switch */
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SystemClockConfig+0x98>)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <SystemClockConfig+0x98>)
 8000a7e:	2103      	movs	r1, #3
 8000a80:	438a      	bics	r2, r1
 8000a82:	60da      	str	r2, [r3, #12]
  RCC->CFGR |= RCC_CFGR_SW_HSI; /* System Clock Switch set to HSI16 */
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <SystemClockConfig+0x98>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SystemClockConfig+0x98>)
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	60da      	str	r2, [r3, #12]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <SystemClockConfig+0x98>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	220c      	movs	r2, #12
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d1f9      	bne.n	8000a92 <SystemClockConfig+0x5e>
    ;
  RCC->CFGR |= RCC_CFGR_MCOPRE_DIV16;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <SystemClockConfig+0x98>)
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SystemClockConfig+0x98>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	05c9      	lsls	r1, r1, #23
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	60da      	str	r2, [r3, #12]
  RCC->CFGR |= RCC_CFGR_MCOSEL_HSI; /* Set HSI Oscillator as Microcontroller Clock */
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SystemClockConfig+0x98>)
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemClockConfig+0x98>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0489      	lsls	r1, r1, #18
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	60da      	str	r2, [r3, #12]
  RCC->APB1ENR &= ~ RCC_APB1ENR_PWREN; /* Power Interface Clock Disable */
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SystemClockConfig+0x98>)
 8000abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SystemClockConfig+0x98>)
 8000ac0:	4904      	ldr	r1, [pc, #16]	; (8000ad4 <SystemClockConfig+0xa0>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40007000 	.word	0x40007000
 8000ad4:	efffffff 	.word	0xefffffff

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	e000      	b.n	8000ae0 <Reset_Handler+0x8>
 8000ade:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b06:	f000 f811 	bl	8000b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fc17 	bl	800033c <main>

08000b0e <LoopForever>:

LoopForever:
  b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20000800 	.word	0x20000800
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b1c:	08000b94 	.word	0x08000b94
  ldr r2, =_sbss
 8000b20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b24:	20000028 	.word	0x20000028

08000b28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <__libc_init_array>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4d0c      	ldr	r5, [pc, #48]	; (8000b64 <__libc_init_array+0x38>)
 8000b32:	4c0d      	ldr	r4, [pc, #52]	; (8000b68 <__libc_init_array+0x3c>)
 8000b34:	1b64      	subs	r4, r4, r5
 8000b36:	10a4      	asrs	r4, r4, #2
 8000b38:	42a6      	cmp	r6, r4
 8000b3a:	d109      	bne.n	8000b50 <__libc_init_array+0x24>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	f000 f819 	bl	8000b74 <_init>
 8000b42:	4d0a      	ldr	r5, [pc, #40]	; (8000b6c <__libc_init_array+0x40>)
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <__libc_init_array+0x44>)
 8000b46:	1b64      	subs	r4, r4, r5
 8000b48:	10a4      	asrs	r4, r4, #2
 8000b4a:	42a6      	cmp	r6, r4
 8000b4c:	d105      	bne.n	8000b5a <__libc_init_array+0x2e>
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
 8000b50:	00b3      	lsls	r3, r6, #2
 8000b52:	58eb      	ldr	r3, [r5, r3]
 8000b54:	4798      	blx	r3
 8000b56:	3601      	adds	r6, #1
 8000b58:	e7ee      	b.n	8000b38 <__libc_init_array+0xc>
 8000b5a:	00b3      	lsls	r3, r6, #2
 8000b5c:	58eb      	ldr	r3, [r5, r3]
 8000b5e:	4798      	blx	r3
 8000b60:	3601      	adds	r6, #1
 8000b62:	e7f2      	b.n	8000b4a <__libc_init_array+0x1e>
 8000b64:	08000b8c 	.word	0x08000b8c
 8000b68:	08000b8c 	.word	0x08000b8c
 8000b6c:	08000b8c 	.word	0x08000b8c
 8000b70:	08000b90 	.word	0x08000b90

08000b74 <_init>:
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b7a:	bc08      	pop	{r3}
 8000b7c:	469e      	mov	lr, r3
 8000b7e:	4770      	bx	lr

08000b80 <_fini>:
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b86:	bc08      	pop	{r3}
 8000b88:	469e      	mov	lr, r3
 8000b8a:	4770      	bx	lr
